import{o as k,c as y,b as f,a as s,w as b,v as w,t as v,F as x,u as A}from"./index-bEcdERby.js";import{N as B}from"./Navbar-BPawfkg-.js";import{H as D}from"./HeaderAI-Cqe6IO_o.js";const I=s("h1",null,"Day 16 - Permutation Promenade",-1),M=s("h2",null,"Part one",-1),O=s("p",null," You come upon a very unusual sight; a group of programs here appear to be dancing. There are sixteen programs in total, named a through p. They start by standing in a line: a stands in position 0, b stands in position 1, and so on until p, which stands in position 15. The programs' dance consists of a sequence of dance moves: Spin, written sX, makes X programs move from the end to the front, but maintain their order otherwise. (For example, s3 on abcde produces cdeab). Exchange, written xA/B, makes the programs at positions A and B swap places. Partner, written pA/B, makes the programs named A and B swap places. For example, with only five programs standing in a line (abcde), they could do the following dance: s1, a spin of size 1: eabcd. x3/4, swapping the last two programs: eabdc. pe/b, swapping programs e and b: baedc. After finishing their dance, the programs end up in order baedc. You watch the dance for a while and record their dance moves (your puzzle input). In what order are the programs standing after their dance? ",-1),j=s("h2",null,"Part two",-1),P=s("p",null," Now that you're starting to get a feel for the dance moves, you turn your attention to the dance as a whole. Keeping the positions they ended up in from their previous dance, the programs perform it again and again: including the first dance, a total of one billion (1000000000) times. In the example above, their second dance would begin with the order baedc, and use the same dance moves: s1, a spin of size 1: cbaed. x3/4, swapping the last two programs: cbade. pe/b, swapping programs e and b: ceadb. In what order are the programs standing after their billion dances? ",-1),z={setup(){return{router:A()}},data(){return{danceMoves:"",order:null,danceMoves2:"",order2:null}},methods:{performDance(){let e="abcdefghijklmnop".split("");this.danceMoves.split(",").forEach(n=>{const a=n[0],o=n.substring(1).split("/");switch(a){case"s":const r=parseInt(o[0]);e=[...e.slice(-r),...e.slice(0,-r)];break;case"x":const i=parseInt(o[0]),d=parseInt(o[1]);[e[i],e[d]]=[e[d],e[i]];break;case"p":const c=e.indexOf(o[0]),t=e.indexOf(o[1]);[e[c],e[t]]=[e[t],e[c]];break}}),this.order=e.join("")},performDance2(){let e="abcdefghijklmnop".split("");const p=this.danceMoves2.split(","),n={};let a=0;for(let r=0;r<1e9;r++){const i=e.join("");if(n[i]){a=r;break}n[i]=!0,p.forEach(d=>{const c=d[0],t=d.substring(1).split("/");switch(c){case"s":const l=parseInt(t[0]);e=[...e.slice(-l),...e.slice(0,-l)];break;case"x":const m=parseInt(t[0]),h=parseInt(t[1]);[e[m],e[h]]=[e[h],e[m]];break;case"p":const u=e.indexOf(t[0]),g=e.indexOf(t[1]);[e[u],e[g]]=[e[g],e[u]];break}})}const o=Object.keys(n)[1e9%a];this.order2=o}}},F=Object.assign(z,{__name:"d16",setup(e){const p=["Un essai pour rÃ©soudre le jour 16 de l'Advent of Code 2017 avec Github Copilot"];return(n,a)=>(k(),y(x,null,[f(B),f(D,{msg:p}),s("main",null,[I,M,O,b(s("input",{"onUpdate:modelValue":a[0]||(a[0]=o=>n.danceMoves=o),placeholder:"Enter dance moves here"},null,512),[[w,n.danceMoves]]),s("button",{onClick:a[1]||(a[1]=(...o)=>n.performDance&&n.performDance(...o))},"Perform Dance"),s("p",null,"Order of programs: "+v(n.order),1),j,P,b(s("input",{"onUpdate:modelValue":a[2]||(a[2]=o=>n.danceMoves2=o),placeholder:"Enter dance moves here"},null,512),[[w,n.danceMoves2]]),s("button",{onClick:a[3]||(a[3]=(...o)=>n.performDance2&&n.performDance2(...o))},"Perform Dance"),s("p",null,"Order of programs: "+v(n.order2),1)])],64))}});export{F as default};
