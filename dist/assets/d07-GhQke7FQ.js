import{o as l,c as u,b as d,a as i,w as c,v as h,d as p,t as m,e as f,F as b,u as y}from"./index-CeEtwwgx.js";import{N as w}from"./Navbar-BcslwJsy.js";import{H as v}from"./HeaderAI-bXN1gh8k.js";const N=i("h1",null,"Day 7 - Some Assembly Required",-1),x=i("h2",null,"Part one",-1),T=i("p",null," This year, Santa brought little Bobby Tables a set of wires and bitwise logic gates! Unfortunately, little Bobby is a little under the recommended age range, and he needs help assembling the circuit. Each wire has an identifier (some lowercase letters) and can carry a 16-bit signal (a number from 0 to 65535). A signal is provided to each wire by a gate, another wire, or some specific value. Each wire can only get a signal from one source, but can provide its signal to multiple destinations. A gate provides no signal until all of its inputs have a signal. The included instructions booklet describes how to connect the parts together: x AND y -> z means to connect wires x and y to an AND gate, and then connect its output to wire z. For example: 123 -> x means that the signal 123 is provided to wire x. x AND y -> z means that the bitwise AND of wire x and wire y is provided to wire z. p LSHIFT 2 -> q means that the value from wire p is left-shifted by 2 and then provided to wire q. NOT e -> f means that the bitwise complement of the value from wire e is provided to wire f. Other possible gates include OR (bitwise OR) and RSHIFT (right-shift). If, for some reason, you'd like to emulate the circuit instead, almost all programming languages (for example, C, JavaScript, or Python) provide operators for these gates. For example, here is a simple circuit: 123 -> x 456 -> y x AND y -> d x OR y -> e x LSHIFT 2 -> f y RSHIFT 2 -> g NOT x -> h NOT y -> i After it is run, these are the signals on the wires: d: 72 e: 507 f: 492 g: 114 h: 65412 i: 65079 x: 123 y: 456 In little Bobby's kit's instructions booklet (provided as your puzzle input), what signal is ultimately provided to wire a? ",-1),A={key:0},k=i("h2",null,"Part two",-1),I=i("p",null," Now, take the signal you got on wire a, override wire b to that signal, and reset the other wires (including wire a). What new signal is ultimately provided to wire a? ",-1),D={key:0},F={data(){return{instructions:"",signal:null,signal2:null}},setup(){return{router:y()}},methods:{calculateSignal(s=!1){const r=this.instructions.split(`
`),t={},e={};for(let a of r){const[o,g]=a.split(" -> ");e[g]=o}s&&(e.b=String(this.signal));const n=a=>{if(t[a]!==void 0)return t[a];if(!isNaN(a))return Number(a);const o=e[a];return t[a]=this.executeInstruction(o,t,n),t[a]};s?this.signal2=n("a"):this.signal=n("a")},executeInstruction(s,r,t){if(/^\d+$/.test(s))return Number(s);if(r[s])return r[s];const e=s.split(" ");return e.length===1?t(e[0]):e[1]==="AND"?t(e[0])&t(e[2]):e[1]==="OR"?t(e[0])|t(e[2]):e[1]==="LSHIFT"?t(e[0])<<t(e[2]):e[1]==="RSHIFT"?t(e[0])>>t(e[2]):e[0]==="NOT"?~t(e[1])&65535:!1}}},C=Object.assign(F,{__name:"d07",setup(s){const r=["Deux essais pour la partie 1 avec Github Copilot, il n'avais pas réussi a bien optimisé","Un essai pour la partie 2 avec Github Copilot"];return(t,e)=>(l(),u(b,null,[d(w),d(v,{msg:r}),i("main",null,[N,x,T,c(i("textarea",{"onUpdate:modelValue":e[0]||(e[0]=n=>t.instructions=n),placeholder:"Enter instructions here, one per line"},null,512),[[h,t.instructions]]),i("button",{onClick:e[1]||(e[1]=n=>t.calculateSignal())},"Calculate Signal"),i("p",null,[p("Signal on wire a: "),t.signal!==null?(l(),u("span",A,m(t.signal),1)):f("",!0)]),k,I,c(i("textarea",{"onUpdate:modelValue":e[2]||(e[2]=n=>t.instructions=n),placeholder:"Enter instructions here, one per line"},null,512),[[h,t.instructions]]),i("button",{onClick:e[3]||(e[3]=n=>t.calculateSignal(!0))},"Calculate Signal for Part 2"),i("p",null,[p("Signal on wire a: "),t.signal!==null?(l(),u("span",D,m(t.signal2),1)):f("",!0)])])],64))}});export{C as default};
