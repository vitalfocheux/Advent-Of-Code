import{o as i,c as n,b as l,a as e,w as p,v as d,d as h,t as u,e as c,F as m,u as P}from"./index-bEcdERby.js";import{N as f}from"./Navbar-BPawfkg-.js";import{H as b}from"./HeaderAI-Cqe6IO_o.js";const v=e("h1",null,"Day 4 - High-Entropy Passphrases",-1),y=e("h2",null,"Part one",-1),V=e("p",null," A new system policy has been put in place that requires all accounts to use a passphrase instead of simply a password. A passphrase consists of a series of words (lowercase letters) separated by spaces. To ensure security, a valid passphrase must contain no duplicate words. For example: aa bb cc dd ee is valid. aa bb cc dd aa is not valid - the word aa appears more than once. aa bb cc dd aaa is valid - aa and aaa count as different words. The system's full passphrase list is available as your puzzle input. How many passphrases are valid? ",-1),g={key:0},T=e("h2",null,"Part two",-1),C=e("p",null," For added security, yet another system policy has been put in place. Now, a valid passphrase must contain no two words that are anagrams of each other - that is, a passphrase is invalid if any word's letters can be rearranged to form any other word in the passphrase. For example: abcde fghij is a valid passphrase. abcde xyz ecdab is not valid - the letters from the third word can be rearranged to form the first word. a ab abc abd abf abj is a valid passphrase, because all letters need to be used when forming another word. iiii oiii ooii oooi oooo is valid. oiii ioii iioi iiio is not valid - any of these words can be rearranged to form any other word. Under this new system policy, how many passphrases are valid? ",-1),N={key:0},k={setup(){return{router:P()}},data(){return{passphrases:"",validPassphrases:null,passphrasesPartTwo:"",validPassphrasesPartTwo:null}},methods:{countValidPassphrases(){const r=this.passphrases.split(`
`);let t=0;for(const s of r){const a=s.split(" "),o=[...new Set(a)];a.length===o.length&&t++}this.validPassphrases=t},countValidPassphrasesPartTwo(){const r=this.passphrasesPartTwo.split(`
`);let t=0;for(const s of r){const a=s.split(" ").map(w=>w.split("").sort().join("")),o=[...new Set(a)];a.length===o.length&&t++}this.validPassphrasesPartTwo=t}}},A=Object.assign(k,{__name:"d04",setup(r){const t=["Un essai pour rÃ©soudre le jour 4 de l'Advent of Code 2017 avec Github Copilot"];return(s,a)=>(i(),n(m,null,[l(f),l(b,{msg:t}),e("main",null,[v,y,V,p(e("textarea",{"onUpdate:modelValue":a[0]||(a[0]=o=>s.passphrases=o),placeholder:"Enter passphrases here"},null,512),[[d,s.passphrases]]),e("button",{onClick:a[1]||(a[1]=(...o)=>s.countValidPassphrases&&s.countValidPassphrases(...o))},"Count Valid Passphrases"),e("p",null,[h("Valid Passphrases: "),s.validPassphrases!==null?(i(),n("span",g,u(s.validPassphrases),1)):c("",!0)]),T,C,p(e("textarea",{"onUpdate:modelValue":a[2]||(a[2]=o=>s.passphrasesPartTwo=o),placeholder:"Enter passphrases here"},null,512),[[d,s.passphrasesPartTwo]]),e("button",{onClick:a[3]||(a[3]=(...o)=>s.countValidPassphrasesPartTwo&&s.countValidPassphrasesPartTwo(...o))},"Count Valid Passphrases"),e("p",null,[h("Valid Passphrases: "),s.countValidPassphrasesPartTwo!==null?(i(),n("span",N,u(s.validPassphrasesPartTwo),1)):c("",!0)])])],64))}});export{A as default};
