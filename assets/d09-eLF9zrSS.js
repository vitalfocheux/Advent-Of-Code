import{o as u,c as h,b as p,a as c,w as g,v as D,d as y,t as b,e as v,F as N,u as A}from"./index-bEcdERby.js";import{N as k}from"./Navbar-BPawfkg-.js";import{H as C}from"./HeaderAI-Cqe6IO_o.js";function*_(i=0,o=1){let e=i;for(;;)yield e,e+=o}function*w(i,o){const e=Array.from(i),n=e.length,t=n;if(t>n)return;let s=Array.from(f(n));const a=Array.from(f(n,n-t,-1)),r=l=>e[l];for(yield s.slice(0,t).map(r);n>0;){let l=!0;for(const d of f(t-1,-1,-1))if(a[d]-=1,a[d]===0)s=s.slice(0,d).concat(s.slice(d+1)).concat(s.slice(d,d+1)),a[d]=n-d;else{const m=a[d],[S,B]=[s[s.length-m],s[d]];s[d]=S,s[s.length-m]=B,yield s.slice(0,t).map(r),l=!1;break}if(l)return}}function*T(i,o){const e=V(i);let n;for(;!(n=e.next()).done;){const t=n.value;if(!o(t))return;yield t}}function V(i){return i[Symbol.iterator]()}function L(i,o,e){const n=_(i,e),t=e>=0?s=>s<o:s=>s>o;return T(n,t)}function f(i,o,e=1){return o!==void 0?L(i,o,e):L(0,i,e)}// istanbul ignore else -- @preserve
// istanbul ignore if -- @preserve
const E=c("h1",null,"Day 9 - All in a Single Night",-1),j=c("h2",null,"Part one",-1),x=c("p",null," Every year, Santa manages to deliver all of his presents in a single night. This year, however, he has some new locations to visit; his elves have provided him the distances between every pair of locations. He can start and end at any two (different) locations he wants, but he must visit each location exactly once. What is the shortest distance he can travel to achieve this? For example, given the following distances: London to Dublin = 464 London to Belfast = 518 Dublin to Belfast = 141 The possible routes are therefore: Dublin -> London -> Belfast = 982 London -> Dublin -> Belfast = 605 London -> Belfast -> Dublin = 659 Dublin -> Belfast -> London = 659 Belfast -> Dublin -> London = 605 Belfast -> London -> Dublin = 982 The shortest of these is London -> Dublin -> Belfast = 605, and so the answer is 605 in this example. What is the distance of the shortest route? ",-1),F={key:0},H=c("h2",null,"Part two",-1),U=c("p",null," The next year, just to show off, Santa decides to take the route with the longest distance instead. He can still start and end at any two (different) locations he wants, and he still must visit each location exactly once. For example, given the distances above, the longest route would be 982 via (for example) Dublin -> London -> Belfast. What is the distance of the longest route? ",-1),W={key:0},I={data(){return{distances:"",shortestDistance:null,longestDistance:null}},setup(){return{router:A()}},methods:{calculateShortestDistance(){const i=this.distances.split(`
`),o=new Set,e={};for(let t of i){const[s,a]=t.split(" = "),[r,l]=s.split(" to ");o.add(r),o.add(l),e[r]||(e[r]={}),e[l]||(e[l]={}),e[r][l]=Number(a),e[l][r]=Number(a)}let n=1/0;for(let t of w(Array.from(o))){let s=0;for(let a=0;a<t.length-1;a++)s+=e[t[a]][t[a+1]];s<n&&(n=s)}this.shortestDistance=n},calculateLongestDistance(){const i=this.distances.split(`
`),o=new Set,e={};for(let t of i){const[s,a]=t.split(" = "),[r,l]=s.split(" to ");o.add(r),o.add(l),e[r]||(e[r]={}),e[l]||(e[l]={}),e[r][l]=Number(a),e[l][r]=Number(a)}let n=0;for(let t of w(Array.from(o))){let s=0;for(let a=0;a<t.length-1;a++)s+=e[t[a]][t[a+1]];s>n&&(n=s)}this.longestDistance=n}}},M=Object.assign(I,{__name:"d09",setup(i){const o=["Un essai pour rÃ©soudre le jour 9 de l'Advent of Code 2015 avec Github Copilot"];return(e,n)=>(u(),h(N,null,[p(k),p(C,{msg:o}),c("main",null,[E,j,x,g(c("textarea",{"onUpdate:modelValue":n[0]||(n[0]=t=>e.distances=t),placeholder:"Enter distances here, one per line"},null,512),[[D,e.distances]]),c("button",{onClick:n[1]||(n[1]=(...t)=>e.calculateShortestDistance&&e.calculateShortestDistance(...t))},"Calculate Shortest Distance"),c("p",null,[y("Shortest Distance: "),e.shortestDistance!==null?(u(),h("span",F,b(e.shortestDistance),1)):v("",!0)]),H,U,g(c("textarea",{"onUpdate:modelValue":n[2]||(n[2]=t=>e.distances=t),placeholder:"Enter distances here, one per line"},null,512),[[D,e.distances]]),c("button",{onClick:n[3]||(n[3]=(...t)=>e.calculateLongestDistance&&e.calculateLongestDistance(...t))},"Calculate Longest Distance"),c("p",null,[y("Longest Distance: "),e.longestDistance!==null?(u(),h("span",W,b(e.longestDistance),1)):v("",!0)])])],64))}});export{M as default};
