import{o as d,c,b as p,a as r,w as h,v as y,d as b,t as m,e as f,F as g,u as v}from"./index-CeEtwwgx.js";import{N as x}from"./Navbar-BcslwJsy.js";import{H as w}from"./HeaderAI-bXN1gh8k.js";const P=r("h1",null,"Day 13 - A Maze of Twisty Little Cubicles",-1),N=r("h2",null,"Part one",-1),O=r("p",null," You arrive at the first floor of this new building to discover a much less welcoming environment than the shiny atrium of the last one. Instead, you are in a maze of twisty little cubicles, all alike. Every location in this area is addressed by a pair of non-negative integers (x,y). Each such coordinate is either a wall or an open space. You can't move diagonally. The cube maze starts at 0,0 and seems to extend infinitely toward positive x and y; negative values are invalid, as they represent a location outside the building. You are in a small waiting area at 1,1. While it seems chaotic, a nearby morale-boosting poster explains, the layout is actually quite logical. You can determine whether a given x,y coordinate will be a wall or an open space using a simple system: Find x*x + 3*x + 2*x*y + y + y*y. Add the office designer's favorite number (your puzzle input). Find the binary representation of that sum; count the number of bits that are 1. If the number of bits that are 1 is even, it's an open space. If the number of bits that are 1 is odd, it's a wall. For example, if the office designer's favorite number were 10, drawing walls as # and open spaces as ., the corner of the building containing 0,0 would look like this: 0123456789 0 .#.####.## 1 ..#..#...# 2 #....##... 3 ###.#.###. 4 .##..#..#. 5 ..##....#. 6 #...##.### Now, suppose you wanted to reach 7,4. The shortest route you could take is marked as O: 0123456789 0 .#.####.## 1 .O#..#...# 2 #OOO.##... 3 ###O#.###. 4 .##OO#OO#. 5 ..##OOO.#. 6 #...##.### Thus, reaching 7,4 would take a minimum of 11 steps (starting from your current location, 1,1). What is the fewest number of steps required for you to reach 31,39? ",-1),S={key:0},k=r("h2",null,"Part two",-1),C=r("p",null," How many locations (distinct x,y coordinates, including your starting location) can you reach in at most 50 steps? ",-1),z={setup(){return{router:v()}},data(){return{inputPart1:0,minSteps:0,inputPart2:0,distinctPositions:0}},methods:{solvePart1(){const i=this.inputPart1,s={x:31,y:39},t=new Set,e=[{position:{x:1,y:1},steps:0}];for(;e.length>0;){const{position:o,steps:a}=e.shift(),l=`${o.x},${o.y}`;if(t.has(l))continue;if(t.add(l),o.x===s.x&&o.y===s.y){this.minSteps=a;return}const u=this.getNeighbors(o,i);for(const n of u)e.push({position:n,steps:a+1})}},isWall(i,s){const{x:t,y:e}=i;return(t*t+3*t+2*t*e+e+e*e+s).toString(2).split("").reduce((u,n)=>u+(n==="1"?1:0),0)%2!==0},getNeighbors(i,s){const{x:t,y:e}=i,o=[{dx:1,dy:0},{dx:-1,dy:0},{dx:0,dy:1},{dx:0,dy:-1}],a=[];for(const{dx:l,dy:u}of o){const n={x:t+l,y:e+u};n.x>=0&&n.y>=0&&!this.isWall(n,s)&&a.push(n)}return a},solvePart2(){const i=this.inputPart2,s=new Set,t=[{position:{x:1,y:1},steps:0}];for(;t.length>0;){const{position:e,steps:o}=t.shift(),a=`${e.x},${e.y}`;if(s.has(a)||o>50)continue;s.add(a);const l=this.getNeighbors2(e,i);for(const u of l)t.push({position:u,steps:o+1})}this.distinctPositions=s.size},isWall2(i,s){const{x:t,y:e}=i;return(t*t+3*t+2*t*e+e+e*e+s).toString(2).split("").reduce((u,n)=>u+(n==="1"?1:0),0)%2!==0},getNeighbors2(i,s){const{x:t,y:e}=i,o=[{dx:1,dy:0},{dx:-1,dy:0},{dx:0,dy:1},{dx:0,dy:-1}],a=[];for(const{dx:l,dy:u}of o){const n={x:t+l,y:e+u};n.x>=0&&n.y>=0&&!this.isWall2(n,s)&&a.push(n)}return a}}},E=Object.assign(z,{__name:"d13",setup(i){const s=["Un essai pour rÃ©soudre le jour 13 de l'Advent of Code 2016 avec Github Copilot"];return(t,e)=>(d(),c(g,null,[p(x),p(w,{msg:s}),r("main",null,[P,N,O,h(r("input",{"onUpdate:modelValue":e[0]||(e[0]=o=>t.inputPart1=o),placeholder:"Enter favorite number",type:"number"},null,512),[[y,t.inputPart1,void 0,{number:!0}]]),r("button",{onClick:e[1]||(e[1]=(...o)=>t.solvePart1&&t.solvePart1(...o))},"Solve Part 1"),r("p",null,[b("Minimum number of steps: "),t.minSteps!==0?(d(),c("span",S,m(t.minSteps),1)):f("",!0)]),k,C,h(r("input",{"onUpdate:modelValue":e[2]||(e[2]=o=>t.inputPart2=o),placeholder:"Enter favorite number",type:"number"},null,512),[[y,t.inputPart2,void 0,{number:!0}]]),r("button",{onClick:e[3]||(e[3]=(...o)=>t.solvePart2&&t.solvePart2(...o))},"Solve Part 2"),r("p",null,"Number of distinct positions: "+m(t.distinctPositions),1)])],64))}});export{E as default};
