import{o as r,c as u,b as l,a as o,w as i,v as m,d as h,t as d,e as c,F as f,u as b}from"./index-CeEtwwgx.js";import{N as p}from"./Navbar-BcslwJsy.js";import{H as g}from"./HeaderAI-bXN1gh8k.js";const y=o("h1",null,"Day 12 - JSAbacusFramework.io",-1),N=o("h2",null,"Part one",-1),S=o("p",null,` Santa's Accounting-Elves need help balancing the books after a recent order. Unfortunately, their accounting software uses a peculiar storage format. That's where you come in. They have a JSON document which contains a variety of things: arrays ([1,2,3]), objects ({"a":1, "b":2}), numbers, and strings. Your first job is to simply find all of the numbers throughout the document and add them together. For example: [1,2,3] and {"a":2,"b":4} both have a sum of 6. [[[3]]] and {"a":{"b":4},"c":-1} both have a sum of 3. {"a":[-1,1]} and [-1,{"a":1}] both have a sum of 0. [] and {} both have a sum of 0. You will not encounter any strings containing numbers. What is the sum of all numbers in the document? `,-1),j={key:0},I=o("h2",null,"Part two",-1),O=o("p",null,' Uh oh - the Accounting-Elves have realized that they double-counted everything red. Ignore any object (and all of its children) which has any property with the value "red". Do this only for objects ({...}), not arrays ([...]). [1,2,3] still has a sum of 6. [1,{"c":"red","b":2},3] now has a sum of 4, because the middle object is ignored. {"d":"red","e":[1,2,3,4],"f":5} now has a sum of 0, because the entire structure is ignored. [1,"red",5] has a sum of 6, because "red" in an array has no effect. ',-1),w={key:0},v={data(){return{jsonInput:"",sum:null,sum2:null,total:0}},setup(){return{router:b()}},methods:{calculateSumOfNumbers(){this.total=0,JSON.parse(this.jsonInput,(n,t)=>(typeof t=="number"&&(this.total+=t),t)),this.sum=this.total},calculateSumOfNumbersIgnoringRed(){this.total=0;const n=(function(t){Array.isArray(t)?t.forEach(e=>n(e)):t&&typeof t=="object"?Object.values(t).includes("red")||Object.values(t).forEach(e=>n(e)):typeof t=="number"&&(this.total+=t)}).bind(this);n(JSON.parse(this.jsonInput)),this.sum2=this.total}}},E=Object.assign(v,{__name:"d12",setup(n){const t=["Un essai pour la partie 1 avec Github Copilot","Neuf essais pour la partie 2 avec Github Copilot"];return(e,s)=>(r(),u(f,null,[l(p),l(g,{msg:t}),o("main",null,[y,N,S,i(o("textarea",{"onUpdate:modelValue":s[0]||(s[0]=a=>e.jsonInput=a),placeholder:"Enter JSON document here"},null,512),[[m,e.jsonInput]]),o("button",{onClick:s[1]||(s[1]=(...a)=>e.calculateSumOfNumbers&&e.calculateSumOfNumbers(...a))},"Calculate Sum of Numbers"),o("p",null,[h("Sum of All Numbers: "),e.sum!==null?(r(),u("span",j,d(e.sum),1)):c("",!0)]),I,O,i(o("textarea",{"onUpdate:modelValue":s[2]||(s[2]=a=>e.jsonInput=a),placeholder:"Enter JSON document here"},null,512),[[m,e.jsonInput]]),o("button",{onClick:s[3]||(s[3]=(...a)=>e.calculateSumOfNumbersIgnoringRed&&e.calculateSumOfNumbersIgnoringRed(...a))},"Calculate Sum of Numbers Ignoring Red"),o("p",null,[h("Sum of All Numbers Ignoring Red: "),e.sum2!==null?(r(),u("span",w,d(e.sum2),1)):c("",!0)])])],64))}});export{E as default};
